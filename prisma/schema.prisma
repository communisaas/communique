generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model author {
  read_email_count    BigInt
  sent_email_count    BigInt
  open_email_count    BigInt
  email_address       String      @id(map: "author___pkey")
  last_updated        DateTime?   @default(now()) @db.Timestamp(6)
  issue_list          String[]
  add_date            DateTime?   @default(now()) @db.Timestamp(6)
  authored_email_list String[]
  user                user        @relation(fields: [email_address], references: [email], onDelete: NoAction, map: "author___fkey")
  email               email[]
  recipient           recipient[]
  topic               topic[]
}

model email {
  subject         String
  body            String
  topic_list      String[]
  open_count      BigInt
  clipboard_count BigInt
  send_count      BigInt
  read_count      BigInt
  recipient_list  String[]
  rowid           String    @id(map: "email___pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  added_by        String
  shortid         String    @unique(map: "shortid__key")
  title           String?
  add_date        DateTime? @default(now()) @db.Timestamp(6)
  issue_list      String[]
  postal_code     String?
  state           String?
  country         String?
  city            String?
  last_updated    DateTime? @default(now()) @db.Timestamp(6)
  author          author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: "added_by___fkey")
  issue           issue[]
}

model issue {
  type        String?
  description String?
  rowid       String    @id(map: "issue___pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  added_by    String
  add_date    DateTime? @default(now()) @db.Timestamp(6)
  email_id    String
  user        user      @relation(fields: [added_by], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "added_by___fk")
  email       email     @relation(fields: [email_id], references: [shortid], onDelete: NoAction, map: "email_id___fk")

  @@unique([added_by, email_id], map: "added_by_email_id___ckey")
}

model recipient {
  address          String    @id(map: "recipient___pkey")
  email_open_count BigInt
  email_read_count BigInt
  email_sent_count BigInt
  added_by         String
  email_count      BigInt
  last_updated     DateTime  @default(now()) @db.Timestamp(6)
  add_date         DateTime? @default(now()) @db.Timestamp(6)
  author           author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: "added_by___fkey")
}

model topic {
  name             String    @id(map: "topic___pkey")
  email_count      BigInt
  last_updated     DateTime  @default(now()) @db.Timestamp(6)
  email_open_count BigInt
  email_read_count BigInt
  email_sent_count BigInt
  added_by         String
  add_date         DateTime? @default(now()) @db.Timestamp(6)
  author           author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: "added_by___fkey")
}

model user {
  email                String    @id(map: "user__pkey")
  fingerprint          Json?
  ignored_content_list String[]
  address              String?
  signup_date          DateTime  @default(now()) @db.Timestamp(6)
  phone                String?
  auth_provider        String?
  last_login           DateTime? @default(now()) @db.Timestamp(6)
  sent_content_list    String[]
  privilege            BigInt?   @default(0)
  given_name           String?
  family_name          String?
  author               author?
  issue                issue[]
}
